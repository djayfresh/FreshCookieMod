package Djf.fresh.trees;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import Djf.fresh.cookies.CookieMod;
import net.minecraft.block.Block;
import net.minecraft.block.BlockLeaves;
import net.minecraft.block.BlockLeavesBase;
import net.minecraft.block.material.Material;
import net.minecraft.client.renderer.texture.IconRegister;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.Icon;
import net.minecraft.world.ColorizerFoliage;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraftforge.common.IShearable;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class MyModLeafs extends BlockLeaves
{
	public static final String[] LEAF_TYPES = new String[] {"pecan", "macadamia"};
	public static final String[][] LEAF_TEXTURES = new String[][] {{"leaves_pecan", "leaves_macadamia"}, {"leaves_pecan_opaque ", "leaves_macadamia_opaque"}};
	private Icon[][] iconArray = new Icon[2][];
	
	
    public MyModLeafs(int par1)
    {
    	super(par1);
        this.setTickRandomly(true);
        setHardness(1.5f);
        setUnlocalizedName("Pecan Leaf");
        setStepSound(soundGrassFootstep);
        setCreativeTab(CookieMod.cookieTab);
    }
    
    public int quantityDropped(Random par1Random)
    {
        return par1Random.nextInt(20) == 0 ? 1 : 0;
    }
    
    public int idDropped(int par1, Random par2Random, int par3)
    {
        return Block.sapling.blockID;
    }
    
    @SideOnly(Side.CLIENT)
    
    public Icon getIcon(int par1, int par2)
    {
        return null;
    }
    
    @SideOnly(Side.CLIENT)
    public int getBlockColor()
    { 
        return ColorizerLeaves.getFoliageColor();
    }

    @SideOnly(Side.CLIENT)
    public int getRenderColor(int par1)
    {
        return (par1 & 3) == 1 ? ColorizerLeaves.getFoliageColorMacadamia() : ColorizerLeaves.getFoliageColorPecan();
    }

    @SideOnly(Side.CLIENT)
    public int colorMultiplier(IBlockAccess par1IBlockAccess, int par2, int par3, int par4)
    {
        int l = par1IBlockAccess.getBlockMetadata(par2, par3, par4);
 
        if ((l & 3) == 0)
        {
            return ColorizerLeaves.getFoliageColorPecan();
        }
        else if ((l & 3) == 1)
        {
            return ColorizerLeaves.getFoliageColorMacadamia();
        }
        else
        {
            int i1 = 0;
            int j1 = 0;
            int k1 = 0;

            for (int l1 = -1; l1 <= 1; ++l1)
            {
                for (int i2 = -1; i2 <= 1; ++i2)
                {
                    int j2 = par1IBlockAccess.getBiomeGenForCoords(par2 + i2, par4 + l1).getBiomeFoliageColor();
                    i1 += (j2 & 16711680) >> 16;
                    j1 += (j2 & 65280) >> 8;
                    k1 += j2 & 255;
                }
            }

            return (i1 / 9 & 255) << 16 | (j1 / 9 & 255) << 8 | k1 / 9 & 255;
        }
    }
    
    @SideOnly(Side.CLIENT)
    public void registerIcons(IconRegister par1IconRegister)
    {
        for (int i = 0; i < LEAF_TEXTURES.length; ++i)
        {
            this.iconArray [i] = new Icon[LEAF_TEXTURES[i].length];

            for (int j = 0; j < LEAF_TEXTURES[i].length; ++j)
            {
                this.iconArray[i][j] = par1IconRegister.registerIcon(CookieMod.modid + ":" + LEAF_TEXTURES[i][j]);
            }
        }
    }
}
